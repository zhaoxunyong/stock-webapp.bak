<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.stock.fetch.dao.StockImportantNewsMapper" >
  <resultMap id="BaseResultMap" type="org.stock.fetch.model.StockImportantNews" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="froms" property="froms" jdbcType="VARCHAR" />
    <result column="subject" property="subject" jdbcType="VARCHAR" />
    <result column="news_date" property="newsDate" jdbcType="TIMESTAMP" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
    <result column="url" property="url" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="BaseColumnList">
    id, froms, subject, news_date, create_date, update_date, url
  </sql>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from stock_important_news
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByFroms" parameterType="java.lang.String" >
    delete from stock_important_news
    where froms = #{froms,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="org.stock.fetch.model.StockImportantNews" useGeneratedKeys="true" keyProperty="id" >
    insert into stock_important_news (id, froms, subject, news_date, 
      create_date, update_date, url
      )
    values (#{id,jdbcType=BIGINT}, #{froms,jdbcType=VARCHAR}, #{subject,jdbcType=VARCHAR}, #{newsDate,jdbcType=TIMESTAMP}, 
      #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP}, #{url,jdbcType=LONGVARCHAR}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="org.stock.fetch.model.StockImportantNews" >
    update stock_important_news
    set froms = #{froms,jdbcType=VARCHAR},
      subject = #{subject,jdbcType=VARCHAR},
      news_date = #{newsDate,jdbcType=TIMESTAMP},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      url = #{url,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select <include refid="BaseColumnList" /> 
    from stock_important_news
    where id = #{id,jdbcType=BIGINT}
  </select>
  
  <select id="getImportantLatestNews" resultMap="BaseResultMap">
    select <include refid="BaseColumnList" /> 
    from stock_important_news
    ORDER BY news_date desc limit 1
  </select>
  
<!--   <select id="selectAll" resultMap="BaseResultMap" > -->
<!--     select <include refid="BaseColumnList" />  -->
<!--     from stock_important_news -->
<!--     order by news_date desc limit #{startNo, jdbcType=INTEGER}, #{pageSize, jdbcType=INTEGER} -->
<!--   </select> -->
  
  <select id="selectExclude" resultMap="BaseResultMap" >
    select <include refid="BaseColumnList" /> 
    from stock_important_news
    <if test="excludeKeys!=null and excludeKeys!=''">
    	where indexof_string(froms, #{excludeKeys, jdbcType=VARCHAR}) = 0
    </if>
    order by news_date desc limit #{startNo, jdbcType=INTEGER}, #{pageSize, jdbcType=INTEGER}
  </select>
  
  <select id="selectInclude" resultMap="BaseResultMap" >
    select <include refid="BaseColumnList" /> from 
    (select <include refid="BaseColumnList" />
	    from stock_important_news
	<if test="excludeKeys!=null and excludeKeys!=''">    
	    where indexof_string(froms, #{excludeKeys, jdbcType=VARCHAR}) = 0
	</if>    
	) b
	<if test="includeKeys!=null and includeKeys!=''">
		where indexof_string(froms, #{includeKeys, jdbcType=VARCHAR}) = 1
	</if>
	order by news_date desc limit #{startNo, jdbcType=INTEGER}, #{pageSize, jdbcType=INTEGER}
  </select>
  
<!--   <select id="count" resultType="int" > -->
<!--     select count(id)  -->
<!--     from stock_important_news -->
<!--   </select> -->
  
  <select id="excludeCount" resultType="int" >
    select count(id) 
    from stock_important_news
	<if test="excludeKeys!=null and excludeKeys!=''"> 
    	where indexof_string(froms, #{excludeKeys, jdbcType=VARCHAR}) = 0
    </if>
  </select>
  
  <select id="includeCount" resultType="int" >
    select count(id) from 
    (select <include refid="BaseColumnList" />
	    from stock_important_news
	<if test="excludeKeys!=null and excludeKeys!=''">     
	    where indexof_string(froms, #{excludeKeys, jdbcType=VARCHAR}) = 0
	</if>
	) b
	<if test="includeKeys!=null and includeKeys!=''">
		where indexof_string(froms, #{includeKeys, jdbcType=VARCHAR}) = 1
	</if>
  </select>
</mapper>